/*!
* TC Blog build at 2019-04-18T13:10:37.647Z (https://tautcony.github.io/)
* Copyright 2019 TautCony
* Licensed under Apache-2.0 (https://github.com/tautcony/tautcony.github.io/blob/master/LICENSE)
*/
!function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n){"undefined"!=typeof Vue&&(Vue.filter("time2date",e=>{const n=new Date(e);return Number.isNaN(n.getTime())?e:n.toDateString()}),Vue.filter("info2url",e=>{const n=e.assets;if(0===n.length)return e.zipball_url;for(const e of n)if(e.name.endsWith(".exe"))return e.browser_download_url;return n[0].browser_download_url}),Vue.component("download-link",{props:["owner","repo","width"],template:'<a :class="width" :href="info | info2url" target="_blank" rel="noopener">\n                        <div class="icon icon-cloud-download"></div>\n                        {{this.repo.replace(/-/g, \'\')}}\n                        <br>\n                        version {{this.info.tag_name}}\n                        <span>Updated {{this.info.published_at | time2date}}.</span>\n                    </a>',data:()=>({info:{assets:[{browser_download_url:"#",name:"Loading..."}],name:"Loading...",tag_name:"Loading...",published_at:"Loading..."}}),created(){this.$http.get(`https://api.github.com/repos/${this.owner}/${this.repo}/releases/latest`).then(e=>{this.info=e.data,console.log(e)}).catch(e=>{console.error(`[${e.status}] Failed to load from '${this.owner}/${this.repo}/latest'`)})}}),Vue.component("history-download-link",{props:["name","published_at","info"],template:'<li>\n                        <div class="icon icon-cloud-download"></div>\n                        <a class="link" :href="browser_download_url" target="_blank" rel="noopener">\n                            {{name}}\n                        </a>\n                        ({{published_at}})\n                    </li>',computed:{browser_download_url(){const e=this.info.assets;return 0===e.length?this.info.zipball_url:e[0].browser_download_url}}}),Vue.component("history-download",{props:["owner","repo"],template:'\n        <ul id="all-releases_ct">\n            <history-download-link v-for="info in (this.all_release)"\n                :key="info.node_id"\n                :name="info.name"\n                :published_at="info.published_at | time2date"\n                :info="info"\n            />\n        </ul>',data:()=>({all_release:[{assets:[{browser_download_url:"#",name:"Loading..."}],node_id:"",name:"Loading...",published_at:"Loading..."}]}),created(){this.$http.get(`https://api.github.com/repos/${this.owner}/${this.repo}/releases`).then(e=>{this.all_release=e.data}).catch(e=>{console.error(`[${e.status}] Failed to load from '${this.owner}/${this.repo}'`)})}}),window.tcupdate=new Vue({el:"#tool-downloads"}))}]);